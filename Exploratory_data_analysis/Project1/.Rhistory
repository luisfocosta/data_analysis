notmay<-subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone, col="red", pch=8)
legend("topright", c(17,18), c("blue", "red"), ("May","Other Months"))
legend("topright", c(17,18), c("blue", "red"), c("May","Other Months"))
legend("topright", pch=c(17,18), col=c("blue", "red"), legend=c("May","Other Months"))
text("topright", pch=c(17,18), col=c("blue", "red"), legend=c("May","Other Months"))
text("topright", pch=c(17,18), col=c("blue", "red"),legend=c("May","Other Months"))
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
line(v=median(airquality$Wind), lty=2)
lines(v=median(airquality$Wind), lty=2)
lines(x=median(airquality$Wind), lty=2)
abline(v=median(airquality$Wind),lty=2, lwd=2)
par(mfrwo)
par(mfrow)
par("mfrow")
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main="Ozone and Solar Radiation")
par(mfrow=c(1,3), mar=c(4,4,2,1, oma=c(0,0,2,0)))
par(mfrow=c(1,3), mar=c(4,4,2,1), oma=c(0,0,2,0)))
par(mfrow=c(1,3), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main="Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main="Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer=TRUE)
library(kernlab)
install.packages(kernlab)
install.packages("kernlab"")
install.packages("kernlab")
library(kernlab)
head(kernlab)
data(spam)
head spam
head(spam)
str(spam[,1:5])
str(spam)
lenght(spam)
length(spam)
table(spam)
summary(spam)
sqldf(spam, "select count(*) from spam")
library(sqlldf)
library(sqldf)
sqldf(spam, "select count(*) from spam")
nrow(spam)
length(spam)
table(spam)
str(spam)
nrow(str(spam))
set.seed(3435)
trainIndicator = rbinom(4601, size=1, prob=0.5)
head(trainIndicator)
table(trainIndicator)
trainSpam = spam[trainIndicator ==1,]
testSpam = spam[trainIndicator ==0,]
View(testSpam)
View(trainSpam)
summary(testSpam)
table(testSpam)
str(testSpam)
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve+1) ~ trainSpam$type)
plot(log10(trainSpam[,1:4] +1))
hCluster = hclust(dist(t(trainSpam[1,1:57])))
plot(hCluster)
hCluster2 = hclust(dist(log10(trainSpam[1,1:55]+1)))
hCluster2 = hclust(dist(t(log10(trainSpam[1,1:55]+1)))
hCluster2 = hclust(dist(t(log10(trainSpam[1,1:55]+1))))
plot(hCluster2)
par(mrow=1)
par()
par(mfcol=1)
par()
par("mfcol"=1)
par("mfcol"= 1)
par("mfrow"= 1)
par$mfcol=1
par$mfcol=c[0,1]
par$mfcol=c[1,0]
par("mfcol"")=c[1,0]
par("mfcol)=c[1,0]
par("mfcol")=c[1,0]
par("mfcol")=0
par(mfrow=c(1,1))
hCluster2 = hclust(dist(t(log10(trainSpam[1,1:55]+1))))
hCluster2 = hclust(dist(t(log10(trainSpam[1,1:55]+1))))
hCluster2 = hclust(dist(t(log10(trainSpam[1,1:55]+1))))
plot(hCluster2)
plot(hCluster2)
plot(hCluster2)
par(mcol=c(1,1))
par(mfcol=c(1,1))
plot(hCluster2)
par(mcol=c(0,0))
par(mfrow=c(0,0))
as.numeric(trainSpam$type)-1
trainSpam$numType = as.numeric(trainSpam$type)-1
View(trainSpam)
costFunction = function(x,y) sum(x!=(y>0.5))
cvError=rep(NA, 55)
library(boot)
for (i in 1:55){}
for (i in 1:55){lmFormula = reformulate(names(trainSpam)[i]), response = "numType"
glmFit = glm(lmFormula, family = "binomial", daya=trainSpam)
cvError[i]=cv.glm(trainSpam, glmFit, costFunction, 2)#delta[2]}
for (i in 1:55){lmFormula = reformulate(names(trainSpam)[i]), response = "numType")
glmFit = glm(lmFormula, family = "binomial", daya=trainSpam)
cvError[i]=cv.glm(trainSpam, glmFit, costFunction, 2)#delta[2]}
for (i in 1:55){lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula, family = "binomial", daya=trainSpam)
cvError[i]=cv.glm(trainSpam, glmFit, costFunction, 2)#delta[2]}
for (i in 1:55){lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula, family = "binomial", daya=trainSpam)
cvError[i]=cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]}
for (i in 1:55){lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula, family = "binomial", data=trainSpam)
cvError[i]=cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]}
names(trainSpam)[which.min(cvError)]
predictionModel=glm(numType~charDollar, family="binomial", data=trainSpam)
predictionTest=predict(predictionModel, testSpam)
head(predictionTest)
predictedSpam=rep("nonspam", dim(testSpam)[1])
predictedSpam[predictionModel$fitted>0.5]="spam"
table(predictedSpam, testSpam$type)
view(predict())
install.packages("knitr")
install.packages("knitr")
library((knitr))
library(knitr)
library(knitr)
install.packages("leaflet")
knitr::opts_chunk$set(echo = TRUE, comment = "")
my_map<-leaflet() %>%
addTiles()
my_map<-leaflet() %>%
addTiles()
my_map<-leaflet()
library(leaflet)
my_map<-leaflet()
my_map - addTiles(my_map)
library(leaflet)
my_map <- leaflet()
my_map <- addTiles(my_map)
my_map
library(leaflet)
my_map <- leaflet()
my_map <- addTiles(my_map)
my_map <- addMarkers(lat=39.29, lng=76.589, popup ="mark!")
library(leaflet)
my_map <- leaflet()
my_map <- addTiles(my_map)
my_map <- addMarkers(my_map, lat=39.29, lng=76.589, popup ="mark!")
library(leaflet)
my_map <- leaflet()
my_map <- addTiles(my_map)
my_map <- addMarkers(my_map, lat=39.29, lng=76.589, popup ="mark!")
my_map <- leaflet()
my_map <- addTiles(my_map)
my_map <- addMarkers(my_map, lat=39.29, lng=76.589, popup ="mark!")
my_map
library(leaflet)
my_map <- leaflet()
my_map <- addTiles(my_map)
my_map <- addMarkers(my_map, lat=39.29, lng=-76.589,
popup ="mark!")
my_map
library(leaflet)
my_map <- leaflet() %>%
addTiles(my_map)
my_map <- addMarkers(my_map, lat=39.29, lng=-76.589,
popup ="mark!")
my_map
my_map <- leaflet() %>%
addTiles(my_map) %>%
addMarkers(my_map, lat=39.29, lng=-76.589,
popup ="mark!")
my_map
runif(20, min=39.2, max=39.3)
my_map <- leaflet() %>%
addTiles(my_map) %>%
addMarkers(my_map, lat=39.29, lng=-76.589,
popup ="mark!")
my_map
my_map <- leaflet() %>%
addTiles(my_map) %>%
addMarkers(my_map, lat=39.29, lng=-76.589,
popup ="mark!")
my_map
my_map <- leaflet() %>%
addTiles(my_map) %>%
addMarkers(my_map, lat=39.29, lng=-76.589,
popup ="mark!")
my_map
my_map <- leaflet() %>%
addTiles(my_map) %>%
addMarkers(my_map, lat=39.29, lng=-76.589,
popup ="mark!")
my_map
my_map <- leaflet() %>%
addTiles(my_map) %>%
addMarkers(my_map, lat=39.29, lng=-76.589,
popup ="mark!")
my_map
my_map <- leaflet() %>%
addTiles(my_map) %>%
addMarkers(my_map, lat=39.29, lng=-76.589,
popup ="mark!")
my_map = leaflet()
my_map=addTiles(my_map)
my_map <- leaflet() %>%
addTiles(my_map) %>%
addMarkers(lat=39.29, lng=-76.589,
popup ="mark!")
my_map
my_map <- leaflet() %>%
addTiles() %>%
addMarkers(lat=39.29, lng=-76.589,
popup ="mark!")
my_map
my_map <- leaflet() %>%
addTiles() %>%
addMarkers(lat=runif(20, min=39.2, max=39.3),lng=-76.589,
popup ="mark!")
my_map <- leaflet() %>%
addTiles() %>%
addMarkers(lat=runif(20, min=39.2, max=39.3),lng=-76.589,
popup ="mark!")
my_map <- leaflet() %>%
addTiles() %>%
addMarkers(lat=runif(20, min=39.2, max=39.3),lng=runif(20, min=-76.6, max=-76.6))
my_map
my_map <- leaflet() %>%
addTiles() %>%
addMarkers(lat=runif(20, min=39.2, max=39.3),lng=runif(20, min=-76.6, max=-76.5))
my_map
library(datasets)
data("airquality")
summary(airquality)
pairs(airquality)
table(airquality$Ozone)
summary(table(airquality$Ozone))
with(airquality(pair(Ozone, Solar.R, Wind, Temp)
with(airquality(pair(Ozone, Solar.R, Wind, Temp)))
with(airquality, pair(Ozone, Solar.R, Wind, Temp))
with(airquality, pairs(Ozone, Solar.R, Wind, Temp))
with(airquality, pairs(Ozone, Solar.R, Wind, Temp))
with(airquality[], pairs(Ozone, Solar.R, Wind, Temp))
pairs(airquality$Ozone, airquality$Solar.R, airquality$Wind, airquality$Temp)
airquality$Ozone
pairs
pairs(USJudgeRatings)
pairs(~Ozone +Temp + Wind, data=airquality)
pairs(~Ozone +Temp, data=airquality)
lm(airquality$Ozone ~ airquality$Temp)
with (airquality, lm(Ozone ~ temp))
with (airquality, lm(Ozone ~ Temp))
with (airquality, lm(Ozone ~ Wind + Temp + Solar.R))
library(xtable)
print(xtable(summary(lm(formula = Ozone ~ Wind + Temp + Solar.R))))
print(xtable(summary(lm(formula = Ozone ~ Wind + Temp + Solar.R, data=airquality))))
print(xtable(summary(lm(formula = Ozone ~ Wind + Temp + Solar.R, data=airquality))), type = "html")
```{r showtable, results="asis"}
install.packages("UsingR")
library(manipulate)
install.packages("manipulate")
library(manipulate)
library(UsingR)
data("galton")
head(galton)
length(galton)
length(galton[])
tables[galton]
tables(galton)
table[galton]
table(galton)
table(galton)
# make this an external chunk that can be included in any file
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
options(xtable.type = 'html')
knit_hooks$set(inline = function(x) {
if(is.numeric(x)) {
round(x, getOption('digits'))
} else {
paste(as.character(x), collapse = ', ')
}
})
knit_hooks$set(plot = knitr:::hook_plot_html)
library(UsingR); data(galton)
par(mfrow=c(1,2))
hist(galton$child,col="blue",breaks=100)
hist(galton$parent,col="blue",breaks=100)
# make this an external chunk that can be included in any file
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
options(xtable.type = 'html')
knit_hooks$set(inline = function(x) {
if(is.numeric(x)) {
round(x, getOption('digits'))
} else {
paste(as.character(x), collapse = ', ')
}
})
knit_hooks$set(plot = knitr:::hook_plot_html)
runif(1)
library(UsingR)
data(galton)
library(dplyr); library(ggplot2)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
manipulate()
library(UsingR)
data(galton)
library(dplyr); library(ggplot2)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
manipulate()
manipulate()
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_smooth(method="lm", formula=y~x)
g
lm(I(child-mean(chid))~I(parent-mean(parent)) -1, data=galton)
lm(I(child-mean(chid))~I(parent-mean(parent)) -1, data=galton)
lm(I(child-mean(child))~I(parent-mean(parent)) -1, data=galton)
lm(I(child-mean(child))~I(parent-mean(parent)), data=galton)
lm(I(child-mean(child))~I(parent-mean(parent))-1, data=galton)
lm((child-mean(child))~(parent-mean(parent))-1, data=galton)
y <- galton$child
x <- galton$parent
beta1 <- cor(y, x) *  sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
rbind(c(beta0, beta1), coef(lm(y ~ x)))
beta1 <- cor(y, x) *  sd(x) / sd(y)
beta0 <- mean(x) - beta1 * mean(y)
rbind(c(beta0, beta1), coef(lm(x ~ y)))
beta1 <- cor(y, x) *  sd(x) / sd(y)
beta0 <- mean(x) - beta1 * mean(y)
rbind(c(beta0, beta1), coef(lm(x ~ y)))
yc <- y - mean(y)
xc <- x - mean(x)
beta1 <- sum(yc * xc) / sum(xc ^ 2)
c(beta1, coef(lm(y ~ x))[2])
yn <- (y - mean(y))/sd(y)
xn <- (x - mean(x))/sd(x)
c(cor(y, x), cor(yn, xn), coef(lm(yn ~ xn))[2])
sd(y)
sd(yn)
sd(xn)
c(cor(y, x), cor(yn, xn), coef(lm(yn ~ xn))[2])
c(cor(y, x), cor(yn, xn), coef(lm(yn ~ xn))
c(cor(y, x), cor(yn, xn), coef(lm(yn ~ xn)))
library(UsingR)
data(father.son)
y <- (father.son$sheight - mean(father.son$sheight)) / sd(father.son$sheight)
x <- (father.son$fheight - mean(father.son$fheight)) / sd(father.son$fheight)
rho <- cor(x, y)
library(ggplot2)
g = ggplot(data.frame(x = x, y = y), aes(x = x, y = y))
g
g = g + geom_point(size = 5, alpha = .2, colour = "black")
g = g + geom_point(size = 4, alpha = .2, colour = "red")
g
g = g + geom_vline(xintercept = 0)
g = g + geom_hline(yintercept = 0)
g
g = g + geom_abline(position = "identity")
g = g + geom_abline(intercept = 0, slope = rho, size = 2)
g = g + geom_abline(intercept = 0, slope = 1 / rho, size = 2)
g
g = g + xlab("Father's height, normalized")
g = g + ylab("Son's height, normalized")
g
install_from_swirl("Regression Models")
library(swirl)
√
install_from_swirl("Regression Models")
swirl()
plot(child~parent, galton)
plot(jitter(child,4)~parent, galton)
regrline<-lm(child~parent, galton)
abline(regrline, lwd=3, col="red")
summary(regrline)
fit=lm(child~parent, data=galton)
fit$residuals
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic<-fit$coef[1]
ols.slope<-fit$coef[2]
h
swirl()
swirl()
rhs-lhs
lhs-rhs
all.equal(lhs, rhs)
varChild-<var(galton$child)
varChild<-var(galton$child)
varRes<-var(fit$residuals)
varEst<-var(ols.slope, ols.ic)
varEst<-var(est(ols.slope, ols.ic))
all.equal(varChild, varRes+varEst)
efit<-lm(accel~mag+dist, attenu)
summary(efit)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
swirl()
setwd("~/Desktop/Google Drive/Personal/Trainings/Data Sciences/R/data_analysis/Exploratory_data_analysis/Project1")
source("dataload.R")
source("dataload.R")
data<-load_data())
data<-load_data()
source("dataload.R")
data<-load_data()
source("dataload.R")
data<-load_data()
head(data)
source("dataload.R")
data<-load_data()
head(data)
View(data)
data$Time <- date_time_conv (data$Date, data$Time)
data$Date <- as.date(data$Date, "%d%m%Y")
data$Date <- as.Date(data$Date, "%d%m%Y")
source("dataload.R")
data<-load_data()
data<-load_data()
source("dataload.R")
data<-load_data()
View(data)
as.Date("16/12/2001")
as.Date("16/12/2001", "%Y/%m/%d")
as.Date("16/12/2001", "%d/%m/%Y")
source("dataload.R")
source("dataload.R")
data<-load_data()
plot1()
source("plot1.R")
plot1()
png("plot1.png, width=400, height=400")
hist(data$Global_active_power,
xlab="Global Active Power (kilowatts)",
col="red")
head(data)
sum(data$Global_active_power)
hist(data$Global_active_power)
plot1()
hist(data$Global_active_power)
source("plot1.R")
hist(data$Global_active_power)
summary(data$Global_active_power)
hist(data$Global_active_power)
source("plot1.R")
plot1(location="screen")
hist(data$Global_active_power,
xlab="Global Active Power (kilowatts)",
col="red")
hist(data$Global_active_power,
xlab="Global Active Power (kilowatts)",
col="red")
hist(data$Global_active_power,
xlab="Global Active Power (kilowatts)",
col="red")
plot1(data, location="screen")
source("plot1.R")
plot1(data, location="screen")
plot1(data, location="screen")
source("plot1.R")
plot1(data, location="screen")
source("plot1.R")
plot1(data, location="screen")
source("plot1.R")
plot1(data, location="screen")
plot1(data, location="screen")
source("plot1.R")
plot1(data, location="screen")
source("plot1.R")
plot1(data, location="screen")
plot1(data, location="screen")
source("plot1.R")
plot1(data, location="screen")
plot1(data)
source("plot1.R")
plot1(data)
plot(data$Global_active_power)
plot(data$Time, data$Global_active_power, type="l")
dev.cur()
dev.list()
plot(data$Time, data$Global_active_power, type="l")
